@inherits LayoutComponentBase
@rendermode InteractiveServer

@* @inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http.Extensions *@

@page "/Opret"

<div class="container">

    <div class="header">

        <h1 class="Opret">Opret</h1>

    </div>

    <div class="form-group">

        <input type="text" @bind="brugernavn" placeholder="Brugernavn" class="input-box" disabled="@isDisable" />
        <input type="password" @bind="adgangskode" placeholder="Adgangskode" class="input-box" disabled="@isDisable" />

    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p style="color:red">@Message</p>
    }

    <div class="form-group-buttom">

        <button type="submit" @onclick="RegisterUser" class="btn">Opret</button>
        <NavLink href="/" class="btn">tilbage</NavLink>
    </div>

</div>

<style>
    body {
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .container {
        width: 400px;
        height: 300px;
        border-radius: 20px;
        border: 1px solid #ccc;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
        gap: 20px;
    }

    .header h1 {
        margin: 0;
        font-size: 1.5rem;
    }

    .form-group {
        width: 100%;
        display: flex;
        justify-content: space-between;
        gap: 10px;
    }

    .input-box {
        width: 48%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        text-align: center;
    }

    .form-group-buttom {
        display: flex;
        justify-content: center;
        gap: 10px; /* Mindre afstand mellem knapper */
        width: 100%;
    }

    .btn {
        padding: 10px 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }
</style>

@code {
    private bool isDisable { get; set; }
    private string brugernavn { get; set; } = string.Empty;
    private string adgangskode { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;


    private async Task RegisterUser()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(brugernavn) || string.IsNullOrWhiteSpace(adgangskode))
            {
                Message = "Brugernavn og adgangskode må ikke være tomme.";
                Console.WriteLine(Message); // Log fejl
                return;
            }

            var userDto = new
            {
                brugernavn = brugernavn,
                adgangskode = adgangskode
            };

            this.isDisable = true;

            var response = await Http.PostAsJsonAsync("api/Login/register", userDto);

            if (response.IsSuccessStatusCode)
            {
                Message = "Bruger oprettet succesfuldt!";
                Console.WriteLine(Message); // Log succes
                brugernavn = brugernavn;
                adgangskode = adgangskode;
                StateHasChanged();
                System.Threading.Thread.Sleep(5000);
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Fejl: {error}";
                Console.WriteLine(Message); // Log API-fejl
            }
        }
        catch (Exception ex)
        {
            Message = $"Fejl: {ex.Message}";
            Console.WriteLine(Message); // Log exceptions
        }
    }
}